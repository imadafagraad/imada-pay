import express, {
  json,
  urlencoded,
  Request,
  Response,
  NextFunction,
} from 'express'
import { ValidateError } from 'tsoa'
import { RegisterRoutes } from '../generated/routes'
import swaggerUi from 'swagger-ui-express'
import { AuthenticationError } from './authentication'

const PORT = process.env.PORT ?? 3000

const app = express()

app.use(
  urlencoded({
    extended: true,
  })
)
app.use(json())

// register REST api routes generated by `tsoa`
const apiRouter = express.Router()
RegisterRoutes(apiRouter)
app.use('/api/v1', apiRouter)

app.get('/healthcheck', (_req, res) => {
  res.end('ok')
})

// serve auto-generated documentation for REST api at /docs
app.use('/docs', swaggerUi.serve, async (_req: Request, res: Response) => {
  return res.send(
    swaggerUi.generateHTML(await import('../generated/swagger.json'))
  )
})

app.use(function errorHandler(
  err: unknown,
  req: Request,
  res: Response,
  next: NextFunction
): Response | void {
  if (err instanceof ValidateError) {
    console.warn(`Caught Validation Error for ${req.path}:`, err.fields)
    return res.status(422).json({
      message: 'Validation Failed',
      details: err?.fields,
    })
  }

  if (err instanceof AuthenticationError) {
    console.warn(`Caught Authentication Error for ${req.path}:`, err.message)
    return res.status(401).json({
      message: 'Authentication Failed',
      details: err.message,
    })
  }

  if (err instanceof Error) {
    console.warn(`Caught Error for ${req.path}:`, err)
    return res.status(500).json({
      message: 'Internal Server Error',
    })
  }

  next()
})

app.use(function notFoundHandler(_req, res: Response) {
  res.status(404).send({
    message: 'Not Found',
  })
})

app.listen(PORT, () =>
  console.log(`Server listening at http://localhost:${PORT}`)
)
